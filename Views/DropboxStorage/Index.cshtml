@model Kobowi.Dropbox.ViewModels.DropboxStorageViewModel
@{
    Script.Require("jQuery");
    
    Script.Include("knockout-2.2.1.js");
    Script.Include("jquery.fancybox.pack.js");
    
    Style.Include("dropbox.storage.css");
    Style.Include("fancybox/jquery.fancybox.css");                               
}
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        @Display.Metas()
        @Display.HeadScripts()
        @Display.HeadLinks()
        @Display.StyleSheetLinks()
    </head>
    <body>
        <div id="dropbox-browser">
            <h1>
                <span>
                    <a href="#" data-bind="click: $root.home">@T("Dropbox")</a>
                </span>
                <span data-bind="pathTree: path()"></span>
            </h1>
            <div data-bind="css: messageClass() + ' message', visible: message().length > 0, text: message"></div>
            <div class="loading" data-bind="visible: loading()">
                    
            </div>
            <ul data-bind="visible: !loading()">
                <li data-bind="visible: formattedPath() != '/', click: $root.parent" class="nav-parent">
                    <div class="overlay">
                        <p class="filename">@T("Parent Directory")</p>
                    </div>
                </li>
                <!-- ko foreach: contents() -->
                <li data-bind="click: $root.open, style: { backgroundImage: 'url(\'' + thumbnailUrl() + '\')' }, css: (hasThumb ? 'wallpaper' : 'nowallpaper') + ' ' + (selected() ? 'selected' : '')">
                    <div class="overlay">
                        <p class="filename" data-bind="text: name"></p>
                    </div>
                </li>
                <!-- /ko -->
            </ul>
        </div>
        <div id="dropbox-properties">
            <div class="properties" data-bind="visible: selected().name">
                <p>@T("PROPERTIES")</p>
                <div class="thumbnail" data-bind="visible: selected().name, style: { backgroundImage: selected().name ? 'url(\'' + selected().thumbnailUrl() + '\')' : 'none' }">
                
                </div>
                <span class="property" data-bind="visible: selected().name">
                    <span class="propname">@T("Name")</span>
                    <span class="propvalue" data-bind="text: selected().name"></span>
                </span>
                <span class="property" data-bind="visible: selected().size">
                    <span class="propname">@T("Size")</span>
                    <span class="propvalue" data-bind="text: selected().size"></span>
                </span>
                <span class="property" data-bind="visible: selected().modified">
                    <span class="propname">@T("Last Modified")</span>
                    <span class="propvalue" data-bind="text: selected().modified"></span>
                </span>
                <span class="property">
                    <a class="button" data-bind="click: $root.upload">@T("Import")</a>
                    <a class="button" data-bind="visible: selected().hasThumb" id="thumb-preview">@T("Preview")</a>
                </span>
            </div>
            <div class="properties">
                <span data-bind="visible: selection().length > 1">
                    <p>
                        @T("SELECTION") (<span data-bind="text: selection().length"></span>)
                    </p>
                    <button data-bind="click: clearSelection">@T("Clear")</button>
                    <ul class="selection-preview" data-bind="foreach: selection()">
                        <li data-bind="text: name"></li>
                    </ul>
                </span>
            </div>
            <input type="hidden" name="FolderPath" value="@Model.FolderPath"/>
            <input type="hidden" name="ThumbUrl" value="@Url.Action("Thumb")"/>
            <input type="hidden" name="ListUrl" value="@Url.Action("List")"/>
            <input type="hidden" name="PreviewUrl" value="@Url.Action("Preview")"/>
            <input type="hidden" name="UploadUrl" value="@Url.Action("Upload")"/>
            <input type="hidden" name="StyleUrl" value="@(String.Format("{0}/Modules/Kobowi.Dropbox/Styles", WorkContext.CurrentSite.BaseUrl))"/>
            <input type="hidden" name="AntiforgeryToken" value="@Html.AntiForgeryTokenValueOrchard()"/>
        </div>
        @using (Script.Foot()) {
            <script type="text/javascript">
                
                var urls = {
                    "thumb": $('input[name="ThumbUrl"]').val(),
                    "list": $('input[name="ListUrl"]').val(),
                    "preview": $('input[name="PreviewUrl"]').val(),
                    "upload": $('input[name="UploadUrl"]').val(),
                    "style": $('input[name="StyleUrl"]').val()
                };
                
                var antiforgeryToken = $('input[name="AntiforgeryToken"]').val();
                var folderPath = $('input[name="FolderPath"]').val();

                $(function () {
                    
                    // Binding for "Dropbox > Folder > Folder" navigation
                    ko.bindingHandlers.pathTree = {
                        init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) { },
                        update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            var path = valueAccessor();
                            $(element).html('');
                            for (var i = 0; i < path.length; i++) {
                                (function(j) {
                                    var parent = $('<span></span>').appendTo(element);
                                    $('<a href="#">' + path[i] + '</a>')
                                        .appendTo(parent)
                                        .click(function(e) {
                                            e.preventDefault();
                                            var p = path.slice(0, j + 1);
                                            viewModel.ls('/' + p.join('/'), viewModel.update);
                                            viewModel.path(p);
                                        });
                                })(i);
                            }
                        }
                    };

                    function DropboxItem(path, name, isFolder, icon, size, extension, modified, hasThumb) {
                        var self = this;
                        self.path = path;
                        self.name = name;
                        self.isFolder = isFolder;
                        self.icon = icon;
                        self.size = size;
                        self.extension = extension;
                        self.modified = modified.substr(0, modified.length - 6);
                        self.hasThumb = hasThumb;
                        self.thumbnailUrl = ko.computed(function() {
                            if (self.hasThumb) {
                                return urls['thumb'] + '?path=' + self.path + '/' + self.name;
                            } else {
                                return urls['style'] + '/images/dropbox/48x48/' + self.icon + '48.gif';
                            }
                        });
                        self.previewUrl = function() {
                            if (self.hasThumb) {
                                return urls['preview'] + '?path=' + self.path + '/' + self.name;
                            }
                            return null;
                        };
                        self.selected = ko.observable(false);
                    }

                    function DropboxViewModel() {
                        var self = this;
                        self.contents = ko.observableArray([]);
                        self.path = ko.observableArray([]);
                        self.selected = ko.observable({});
                        self.formattedPath = ko.computed(function() {
                            return '/' + self.path().join("/");
                        });
                        self.message = ko.observable("");
                        self.messageClass = ko.observable("");
                        self.loading = ko.observable(true);
                        self.selection = ko.computed(function() {
                            return $.grep(self.contents(), function(n, i) {
                                return n.selected();
                            });
                        });

                        // List items at path
                        self.ls = function(path, callback) {
                            self.loading(true);
                            $.getJSON(urls["list"], { path: path },
                                function(data) {
                                    callback(data);
                                    self.loading(false);
                                });
                        };

                        // Update list of items
                        self.update = function(contents) {
                            var length = self.contents().length;
                            for (var i = 0; i < length; i++) {
                                self.contents.pop();
                            }
                            self.pushobj(self.formattedPath(), contents);
                        };

                        // Open an item
                        self.open = function(item, e) {
                            if (item.isFolder) {
                                self.path.push(item.name);
                                self.ls(self.formattedPath(), self.update);
                                if (self.selected().selected) {
                                    self.selected().selected(false);
                                }
                                self.selected({});
                            } else {
                                if (e.ctrlKey) {
                                    if (item.selected()) {
                                        item.selected(false);
                                    } else {
                                        item.selected(true);
                                        self.selected(item);
                                    }
                                } else {
                                    $.map(self.contents(), function(n, i) {
                                        n.selected(false);
                                    });
                                    if (self.selected().selected) {
                                        self.selected().selected(false);
                                    }
                                    self.selected(item);
                                    item.selected(true);
                                }
                            }
                            
                            // Set up fancybox for our thumbnail
                            $('#dropbox-properties .thumbnail').css('background-image', '');
                            if (item.hasThumb) {
                                $('#thumb-preview').attr('href', urls["preview"] + '?path=' + self.formattedPath() + '/' + item.name);
                                $('#thumb-preview').fancybox();
                            }
                        };
                        
                        // Open parent folder
                        self.parent = function() {
                            self.path.pop();
                            self.ls(self.formattedPath(), self.update);
                        };
                        
                        // Load array of DropboxItem-esque objects
                        self.pushobj = function(path, obj) {
                            $.map(obj, function(element, index) {
                                self.contents.push(new DropboxItem(
                                    path,
                                    element.name,
                                    element.isFolder,
                                    element.icon,
                                    element.size,
                                    element.extension,
                                    element.modified,
                                    element.hasThumb));
                            });
                        };
                        
                        // Get thumbnail for an item in the current folder
                        self.thumbnail = function(item, callback) {
                            var path = self.formattedPath() + '/' + item.name;
                            $.getJSON(urls['thumb'], { path: path },
                                function(data) {
                                    callback(data);
                                });
                        };
                        
                        // Upload
                        self.upload = function() {
                            $.post(urls["upload"], {
                                folderPath: folderPath,
                                path: self.formattedPath() + '/' + self.selected().name,
                                name: self.selected().name,
                                __RequestVerificationToken: antiforgeryToken
                            })
                            .done(function() {
                                self.message('File imported successully');
                                self.messageClass('message-Information');
                            })
                            .fail(function() {
                                self.message('Failed to upload file');
                                self.messageClass('message-Error');
                            });
                        };
                        
                        // Go home
                        self.home = function() {
                            self.ls('/', self.update);
                            self.path([]);
                        };
                        
                        // Clear multiple selection
                        self.clearSelection = function() {
                            $.map(self.selection(), function(n, i) {
                                n.selected(false);
                            });
                            self.selected({});
                        };
                    }

                    var model = new DropboxViewModel();
                    ko.applyBindings(model);

                    model.pushobj('/', @Html.Raw(Json.Encode(Model.Contents)));
                    model.loading(false);
                });
            </script>
        }
        @Display.FootScripts()
    </body>
</html>